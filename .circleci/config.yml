version: 2.1

commands:
    install_awscli:
       description: install AWS CLI v2
       steps:
         - run:
            name: install AWS CLI v2
            command: |
               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
               sudo ./aws/install
    install_ansible:
       description: install ANSIBLE CLI v2
       steps:
         - run:
            name: install ANSIBLE CLI v2
            command: |
                sudo apt update
                sudo apt install software-properties-common -y
                sudo add-apt-repository --yes --update ppa:ansible/ansible
                sudo apt install ansible

    install_nodejs:  
      description: Install Node.js 13
      steps:
      - run:
         name: Install Node.js 
         command: |
           curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
           sudo apt install -y nodejs            


    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
                 
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
              aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

    revert-migrations:
       description: Revert the last migration if successfully run in the current workflow.
       parameters:
         Workflow_ID:
           type: string
           default: ${CIRCLE_WORKFLOW_ID:0:7}    
       steps:
         - run:
             name: Revert migrations
             when: on_fail
             command: |
               SUCCESS=$(curl --insecure https://kvdb.io/RsjA1PWpoaUYkNL1srUuT7/migration_<< parameters.Workflow_ID >>)
               if(($SUCCESS=1));
               then 
                cd ~/project/backend
                npm install
                npm run migration:revert
               fi

  
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dps]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Frond-end-unit-test
          command: |
             cd frontend
             npm install
             npm test
  
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dps]
      - run:
          name: back-end-unit-test
          command: |
             cd backend
             npm install
             npm test
     
            
  scan-frontend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-dps]
      - run:
          name: front-end-scan
          command: |
             cd frontend
             npm install
             npm audit fix --force --audit-level=high
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
  scan-backend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: back-end-scan
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit fix --force
            # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
           echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
           cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment    

  configure-infrastructure:  # create configure-infrastructure
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["72:de:fb:5a:f0:7a:29:6a:1f:a7:9a:25:35:df:fb:4e"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml  
      
      - destroy-environment   

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install      
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run: 
          name: Send Migration Results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              
              curl -d '1' https://kvdb.io/RsjA1PWpoaUYkNL1srUuT7/migration_${CIRCLE_WORKFLOW_ID:0:7}  
            fi
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            
            echo $BACKEND_PUBLIC_IP >> frontend/.env
            cat .circleci/ansible/inventory.txt

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env

            

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["72:de:fb:5a:f0:7a:29:6a:1f:a7:9a:25:35:df:fb:4e"]  
      - attach_workspace:
          at: ~/    
      - restore_cache:
          keys: [backend-dps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run: 
          name: packege backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*


            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          #no_output_timeout: 30m
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test: # createe smoke-test
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: "Install curl"
           
          command: |

            sudo apt install -y curl 
          
      - run:
          name: Backend smoke test.
          
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].instances[*].PublicIpAddress' \
              --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com            
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 1 
            else
              exit 2
            fi 
      # - destroy-environment 
      - revert-migrations

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:                     #disabled temp for testing
          requires: [build-backend]   
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [scan-backend,scan-frontend,test-frontend, test-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]
          